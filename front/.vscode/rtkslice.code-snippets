{
  "Create Slice": {
    "prefix": "rtkslice",
    "body": [
      "import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';",
      "",
      "const sliceName = '${1:name}';",
      "",
      "type ${2:name}State = { isLoading: boolean; hasError: boolean }",
      "",
      "const initialState: ${2:name}State = {  ",
      "\tisLoading: false,",
      "\thasError: false",
      "}",
      "",
      "export const fetchTodo = createAsyncThunk<{retour: any}, { params: any }>(",
      "\t`$${sliceName}/fetchTodo`,",
      "\tasync ({ params }, { rejectWithValue, ... }) => {",
      "\t\ttry {",
      "\t\t\t// todo",
      "\t\t\treturn { retour: 'todo' }",
      "\t\t} catch (error) {",
      "\t\t\t// todo",
      "\t\t}",
      "});",
      "",
      "const ${2:name}Slice = createSlice({",
      "\tname: sliceName,",
      "\tinitialState,",
      "\treducers: {",
      "\t\treset${2:name}Slice: () => initialState,",
      "\t},",
      "\textraReducers: (builder) => {",
      "\t\t// fetchTodo",
      "\t\tbuilder.addCase(fetchTodo.pending, (state) => {",
      "\t\t\tstate.isLoading = true;",
      "\t\t});",
      "",
      "\t\tbuilder.addCase(fetchTodo.rejected, () => ({ ...initialState, hasError: true }));",
      "",
      "\t\tbuilder.addCase(fetchTodo.fulfilled, (state, action) => {",
      "\t\t\t// todo",
      "\t\t\tstate.isLoading = false;",
      "\t\t});",
      "\t},",
      "});",
      "",
      " export const { reset${2:name}Slice } = ${2:name}Slice.actions;",
      "",
      "export default ${2:name}Slice.reducer;",
      "",
      ""
    ],
    "description": "Basic RTK Slice"
  }
}
